V 14
3
LANG:10027 12 Столб_1
LANG:10001 12 AI_situation
LANG:10000 16 Messwertbalken_1
PANEL,-1 -1 352 152 N "fon_static" 4
"$b_IBit"
"$b_isDuplAlert"
"$dpe_value"
"$i_PozTypeText"
E E E E E 1 -1 -1 0  0 0
""0  1
E E 4
"CBRef" "0"
"EClose" E
"dpi" "120"
"pdpi" "120"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
2
LANG:10027 6 Layer1
LANG:10001 6 Layer1
6 14
"p1"
""
1 120 100 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
13 0 0 0 0 0
E E E
0
2
LANG:10027 0 
LANG:10001 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"string lineColor = \"cont_static\";

main()
{
  EP_setForeColor();
  if ($b_isDuplAlert){
    EP_setColorUstavka();
  }
}

void EP_setForeColor()
{
  dyn_errClass err;

  if( !dpExists( $dpe_value+\".OUT:_alert_hdl.._act_state_color\"))
  {
    setValue(\"\", \"color\", \"fon_nan\");
    return;
  }

  dpConnect(\"EP_setForeColorCB\",
            $dpe_value+\".OUT:_alert_hdl.._act_state_color\",
            $dpe_value+\".OUT:_online.._invalid\",
            $dpe_value+\".REP\");
  err = getLastError();
  if (dynlen(err) > 0)
    setValue(\"\", \"color\", \"fon_nan\");

}


void EP_setForeColorCB(string dpSource, string sNewColor, string dpInvalid, bool boInvalid, string dpSource2, bool value)
{
  if (boInvalid) {
      if (value) {// ремонт
        setValue(\"\", \"visible\",0);
      } else {
        setValue(\"\", \"foreCol\", \"fon_nan\");
        setValue(\"\", \"visible\",1);
      }

    } else {
      if (value) {// ремонт
        setValue(\"\", \"visible\",0);
      } else {
        setValue(\"\", \"foreCol\", sNewColor);
        if (sNewColor==\"\")
           setValue(\"\", \"visible\",0);
        else {
           setValue(\"\", \"visible\",1);
           dpSet($dpe_value+\".SHOW\", 1);//тег и значение автоматически включаются при превышении предупредительных и предаварийных значениях аналогового параметра
         }
      }
    }
}

void EP_setColorUstavka()
{
  dyn_errClass err;

  if( !dpExists( $dpe_value+\".OUT:_alert_hdl.._act_prior\"))
  {
    return;
  }

  dpConnect(\"EP_setColorCBUstavka\",
            $dpe_value+\".OUT:_alert_hdl.._act_prior\",
            $dpe_value+\".OUT:_online.._invalid\",
            $dpe_value+\".REP\");
  err = getLastError();
}

void EP_setColorCBUstavka(string dpSource, int iPrior, string dpInvalid, bool boInvalid, string dpSource2, bool value)
{
  if (boInvalid || value) {//если ремонт или неисправен
    visibleUstavkaLine(false);
  } else {
    visibleUstavkaLine(true);
    if (iPrior == ALERT_PRIOR_HH) {
      setValue(\"lineHH\", \"foreCol\", \"fon_alarm\");
      setValue(\"lineH\", \"foreCol\", lineColor);
      setValue(\"lineL\", \"foreCol\", lineColor);
      setValue(\"lineLL\", \"foreCol\", lineColor);
    } else if (iPrior == ALERT_PRIOR_LL) {
      setValue(\"lineLL\", \"foreCol\", \"fon_alarm\");
      setValue(\"lineH\", \"foreCol\", lineColor);
      setValue(\"lineL\", \"foreCol\", lineColor);
      setValue(\"lineHH\", \"foreCol\", lineColor);
    } else if (iPrior == ALERT_PRIOR_L) {
      setValue(\"lineL\", \"foreCol\", \"fon_warn\");
      setValue(\"lineH\", \"foreCol\", lineColor);
      setValue(\"lineLL\", \"foreCol\", lineColor);
      setValue(\"lineHH\", \"foreCol\", lineColor);
    } else if (iPrior == ALERT_PRIOR_H) {
      setValue(\"lineH\", \"foreCol\", \"fon_warn\");
      setValue(\"lineL\", \"foreCol\", lineColor);
      setValue(\"lineLL\", \"foreCol\", lineColor);
      setValue(\"lineHH\", \"foreCol\", lineColor);
    } else {
      setValue(\"lineHH\", \"foreCol\", lineColor);
      setValue(\"lineH\", \"foreCol\", lineColor);
      setValue(\"lineL\", \"foreCol\", lineColor);
      setValue(\"lineLL\", \"foreCol\", lineColor);
    }
  }
}

void visibleUstavkaLine(bool isVisible)
{
  setValue(\"lineHH\", \"visible\", isVisible);
  setValue(\"lineH\", \"visible\", isVisible);
  setValue(\"lineL\", \"visible\", isVisible);
  setValue(\"lineLL\", \"visible\", isVisible);
}
" 0
 E 0 1 3 2 1 E 4.016666666666665 0 0.3051111111111102 -441.9999999999998 9.48888888888898 0 E 120 100 180 250
2 16
"value"
""
1 199.1666666666666 49.62051282051269 E E E 1 E 1 E N "cont_static" E N "_Transparent" E E
 E E
15 0 0 0 0 0
E E E
0
3
LANG:10027 0 
LANG:10001 0 
LANG:10000 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
"main()
{

  EP_textFieldIn();
}
void EP_textFieldIn()
{
  dyn_errClass err;

  if( !dpExists( $dpe_value+\".OUT\"))
  {
    setValue(\"\", \"color\", \"fon_nan\");
    return;
  }

  dpConnect(\"EP_textFieldInCB\",
            $dpe_value+\".OUT\",
            $dpe_value+\".OUT:_online.._invalid\",
            $dpe_value+\".REP\");
  err = getLastError();
  if (dynlen(err) > 0)
    setValue(\"\", \"color\", \"fon_nan\");

}


void EP_textFieldInCB(string dp, float fNewValue, string dpInvalid, bool boInvalid, string dpSource2, bool value)
{
  if (boInvalid || value) {
    setValue(\"\", \"text\", \"\");
  } else {
    setValue(\"\", \"text\", strltrim(dpValToString(dp, fNewValue, TRUE), \" \") );
  }
}

// SimpleCtrlScript {EP_textFieldIn}
// DP {$dpe_value}
// DPConfig {:_online.._value}
// DPType {float}
// UseDPUnit {TRUE}
// UseDPFormat {TRUE}
// SimpleCtrlScriptEnd {EP_textFieldIn}
" 0
 E 0 1 1 0 1 E U  0 E 199.1666666666666 49.62051282051269 244.1666666666667 62.62051282051269
0 2 2 "10s" 10 0 0 64 0 0  199.1666666666666 49.62051282051269 1
3
LANG:10027 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10001 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,11,5,50,0,0,0,0,0
0 3
LANG:10027 6 ######
LANG:10001 4 Text
LANG:10000 4 Text
2 22
"tag"
""
1 239.1666666666666 49.62051282051269 E E E 1 E 1 E N "cont_static" E N "_Transparent" E E
 E E
19 0 0 0 0 0
E E E
0
3
LANG:10027 0 
LANG:10001 0 
LANG:10000 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
"
main()
{
  //EP_textFieldIn();
  setValue(\"\", \"text\", dpGetAlias($dpe_value+\".\"));
}

/*
void EP_textFieldIn()
{
  dyn_errClass err;

  if( !dpExists( $dpe_value+\".OUT:_general.._string_01\"))
  {
    setValue(\"\", \"text\", \"\");
    return;
  }

  dpConnect(\"EP_textFieldInCB\",
            $dpe_value+\".OUT:_general.._string_01\",
            $dpe_value+\".OUT:_online.._invalid\",
            $dpe_value+\".REP\");
  err = getLastError();
  if (dynlen(err) > 0)
    setValue(\"\", \"color\", \"fon_nan\");

}

void EP_textFieldInCB(string dp, string sNewValue, string dpInvalid, bool boInvalid, string dpSource2, bool value)
{
  if (boInvalid || value) {
    if (value) {//ремонт
      setValue(\"\", \"foreCol\", \"fon_rem\");
      setValue(\"p2\", \"foreCol\", \"fon_rem\");
      setValue(\"p3\", \"foreCol\", \"fon_rem\");
    } else {
      setValue(\"\", \"foreCol\", \"fon_nan\");
      setValue(\"p2\", \"foreCol\", \"fon_nan\");
      setValue(\"p3\", \"foreCol\", \"fon_nan\");
    }
  } else {
    setValue(\"\", \"foreCol\", \"cont_static\");
    setValue(\"p2\", \"foreCol\", \"cont_static\");
    setValue(\"p3\", \"foreCol\", \"cont_static\");
  }
  setValue(\"\", \"text\", sNewValue);
}
*/
" 0
 E 0 1 1 0 1 E U  0 E 239.1666666666666 49.62051282051269 254.5512820512821 62.62051282051269
0 2 2 "10s" 10 0 0 64 0 0  239.1666666666666 49.62051282051269 1
3
LANG:10027 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10001 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,11,5,50,0,0,0,0,0
0 3
LANG:10027 1 #
LANG:10001 4 Text
LANG:10000 4 Text
0
LAYER, 1 
2
LANG:10027 6 Layer2
LANG:10001 6 Layer2
6 8
"s1"
""
1 45.57549857549816 218.8589743589745 E E E 1 E 0 E N "fon_open" E N "fon_open" E E
 E E
10 0 0 0 0 0
E E E
0
3
LANG:10027 0 
LANG:10001 0 
LANG:10000 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
"main()
{
  setPositionUsatvkaLines();
  setPositionTextImitTag();
  setVisibleTags();
}

void setVisibleTags()
{
  dyn_errClass err;

  if( !dpExists( $dpe_value+\".SHOW:_online.._value\"))
  {
    return;
  }
  dpConnect(\"setVisibleTagsCB\",
            $dpe_value+\".SHOW:_online.._value\");
}

void setVisibleTagsCB(string dp, bool boNewValue)
{
  setValue(\"tag\", \"visible\", boNewValue);
  setValue(\"value\", \"visible\", boNewValue);
}

float getMathCal(float fMin, float fMax, float fValue, int sizeY, int pozY)
{
  float fTemp, fNewScale;
  if(fValue>=fMax) fValue=fMax;
  if(fValue<=fMin) fValue=fMin;

  fTemp = (sizeY * fValue)/(fMax - fMin);
  fNewScale = pozY + fTemp;
  return fNewScale;
}

void setPositionUsatvkaLines()
{
  float fMin, fMax, fTemp, fNewScale, fvalHH, fvalH, fvalLL, fvalL;
  int sizeX, sizeY, pozX, pozY, tpozX, tpozY;
  int delta = 2;//дополнительная погрешность для вверхнего предела
  getValue(\"s1\", \"size\",sizeX, sizeY);
  getValue(\"s1\", \"position\",pozX, pozY);
  dpGet(  $dpe_value+\".OUT:_pv_range.._min\", fMin, $dpe_value+\".OUT:_pv_range.._max\", fMax);
  dpGet($dpe_value+\".HH\", fvalHH,
        $dpe_value+\".H\", fvalH,
        $dpe_value+\".L\", fvalL,
        $dpe_value+\".LL\", fvalLL);

  getValue(\"lineHH\", \"position\",tpozX, tpozY);
  fTemp = getMathCal(fMin, fMax, fvalHH, sizeX, pozX);
  setValue(\"lineHH\", \"position\",fTemp+delta, tpozY);

  getValue(\"lineH\", \"position\",tpozX, tpozY);
  fTemp = getMathCal(fMin, fMax, fvalH, sizeX, pozX);
  setValue(\"lineH\", \"position\",fTemp+delta, tpozY);

  getValue(\"lineL\", \"position\",tpozX, tpozY);
  fTemp = getMathCal(fMin, fMax, fvalL, sizeX, pozX);
  setValue(\"lineL\", \"position\",fTemp+delta, tpozY);

  getValue(\"lineLL\", \"position\",tpozX, tpozY);
  fTemp = getMathCal(fMin, fMax, fvalLL, sizeX, pozX);
  setValue(\"lineLL\", \"position\",fTemp+delta, tpozY);

}

void setPositionTextImitTag()
{
  int tagPosX, valuePosX, borderPosX, imitFigPosX, tagPosY, valuePosY, borderPosY, imitFigPosY;
  int pozType;
  int iXPos, iYPos;
  string frm;
  pozType=$i_PozTypeText;
  if (pozType == 0 || pozType>2)
    pozType = 1;
  getValue(\"tag\", \"position\", tagPosX, tagPosY);
  getValue(\"value\", \"position\", valuePosX, valuePosY);
  getValue(\"p1\", \"position\", borderPosX, borderPosY);
  getValue(\"imitFigRef\", \"position\", imitFigPosX, imitFigPosY);
  getValue(\"value\", \"format\", frm);
  if (pozType == 1) {
    iXPos = 0;
    iYPos = 0;
    setValue(\"tag\", \"position\", iXPos + tagPosX, iYPos +tagPosY);
    setValue(\"value\", \"position\", iXPos + valuePosX, iYPos +valuePosY);
  }
  else if (pozType == 2) {
    iXPos = -130;
    iYPos = 0;
    setValue(\"tag\", \"position\", iXPos + tagPosX, iYPos +tagPosY);
    strreplace(frm, \"AlignLeft\", \"AlignRight\");
    setValue(\"value\", \"format\", frm);
    iXPos = -145;
    setValue(\"value\", \"position\", iXPos + valuePosX, iYPos +valuePosY);
    iXPos = -195;
    iYPos = 0;
    setValue(\"imitFigRef\", \"position\", iXPos + imitFigPosX, iYPos +imitFigPosY);
  }

}
" 0
 E -1 1 1 0 1 E -5.51091059616309e-17 0.3 -1 -1.83697019872103e-16 276.8589743589744 64.31666666666669 1 E 18 19 48 217
10 9
"p3"
""
1 18 117 E E E 1 E 1 E N "cont_static" E N "_Transparent" E E
 E E
11 0 0 0 0 0
E E E
0
3
LANG:10027 0 
LANG:10001 0 
LANG:10000 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 2 1 0 1 E 1.83697019872103e-17 -0.3 2.030927835051545 1.243584636247569e-16 19.24041765794331 84.28333333333319 0 E 3 18 117
48 117
48 20
 0
10 10
"p2"
""
1 18 115 E E E 1 E 1 E N "cont_static" E N "_Transparent" E E
 E E
12 0 0 0 0 0
E E E
0
3
LANG:10027 0 
LANG:10001 0 
LANG:10000 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 2 3 0 1 E 1.83697019872103e-17 -0.3 2.020408163265306 1.23714319505702e-16 21.47121925693361 84.28333333333327 0 E 3 18 117
18 19
48 19
 0
4 3
"lineHH"
""
1 215.6666666666667 78.75531229454288 E E E 1 E 1 E N "cont_static" E N "black" E E
 E E
5 0 0 0 0 0
E E E
0
3
LANG:10027 0 
LANG:10001 0 
LANG:10000 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 2 0 1 E  215.6666666666666 69.61685075608128 215.6666666666666 78.61685075608128
4 18
"lineH"
""
1 203.6666666666667 78.5837453288427 E E E 1 E 1 E N "cont_static" E N "black" E E
 E E
16 0 0 0 0 0
E E E
0
3
LANG:10027 0 
LANG:10001 0 
LANG:10000 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 2 0 1 E  203.5111111111111 69.51504303876638 203.5111111111111 78.55119627747288
4 19
"lineL"
""
1 87.99999999999989 78.75531229454288 E E E 1 E 1 E N "cont_static" E N "black" E E
 E E
17 0 0 0 0 0
E E E
0
3
LANG:10027 0 
LANG:10001 0 
LANG:10000 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 2 0 1 E  87.99999999999989 69.61685075608139 87.99999999999989 78.61685075608139
4 20
"lineLL"
""
1 75 78.88677095028558 E E E 1 E 1 E N "cont_static" E N "black" E E
 E E
18 0 0 0 0 0
E E E
0
3
LANG:10027 0 
LANG:10001 0 
LANG:10000 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 2 0 1 E  74.99999999999989 69.48931623931597 74.99999999999989 78.74438527284659
1 30 0 "" 1
0
0
LAYER, 2 
2
LANG:10027 6 Layer3
LANG:10001 6 Layer3
6 29
"RECTANGLE1"
""
1 10 10 E E E 1 E 1 E N "_Transparent" E N "_Transparent" E E
 E E
24 0 0 0 0 0
E E E
0
3
LANG:10027 0 
LANG:10001 0 
LANG:10000 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
"#uses \"Situational_bar\"

string msDPE;
string  msCol;
int    miDirection;
bool    mbIBit;
int     miNum;
bool isSlider;
int aiType;
bool bShowAlarm;

main()
{
 msDPE=$dpe_value;
 //msCol=$s_Col;
 msCol=\"fon_open\";
 miDirection=2;
 mbIBit=$b_IBit;
 miNum=1;
 isSlider = false;
 aiType = 0;
 bShowAlarm = true;
 setValue(\"\",\"fill\",\"[solid]\");
 STD_bar_AI();
}

" 0
 "main(mapping event)
{
  openFrontAndDetailPanel($dpe_value);
}" 0
 3 1 1 0 1 E 8.033333333333328 0 1.386868686868683 -40.33333333333329 26.13131313131319 1 E 10 10 40 43
0
LAYER, 3 
2
LANG:10027 6 Layer4
LANG:10001 6 Layer4
0
LAYER, 4 
2
LANG:10027 6 Layer5
LANG:10001 6 Layer5
0
LAYER, 5 
2
LANG:10027 6 Layer6
LANG:10001 6 Layer6
0
LAYER, 6 
2
LANG:10027 6 Layer7
LANG:10001 6 Layer7
0
LAYER, 7 
2
LANG:10027 6 Layer8
LANG:10001 6 Layer8
0
3 0 "imitFigRef" -1
"layoutAlignment" "AlignNone"
"initCB" "main()
{
  EP_setVisible();
}

void EP_setVisible()
{
  dyn_errClass err;

  if( !dpExists( $dpe_value+\".SIM:_online.._value\"))
  {
    setValue(\"\", \"color\", \"fon_nan\");
    return;
  }

  dpConnect(\"EP_setVisibleCB\",
            $dpe_value+\".SIM:_online.._value\");
  err = getLastError();
  if (dynlen(err) > 0)
    setValue(\"\", \"color\", \"fon_nan\");

}


void EP_setVisibleCB(string dp, bool boNewValue)
{
    setValue(\"\", \"visible\", boNewValue);
}
"
"" ""
"objects/Situational/subsituational/imitPanel.pnl" 177.5111111111111 98.00000000000006 T 25 1 0 1 70.87948717948728 -27.99999999999997
0
0
